<팀 커널 브리핑>
Mask-RCNN 강의(논문 요약)
 - https://www.youtube.com/watch?v=RtSZALC9DlU
 - 멤버 : 서기원
 - 내용 :


1. 배경지식
 (1) Faster R-CNN
  1) 이미지의 모든 픽셀을 RPN(Region Proposal Network)을 통과 시켜 바운딩 박스를 뽑아 낸다.
  2) Fast R-CNN의 과정을 거친다.

 (2) Detection의 종류
  - Object Detection : 이미지에서 각 객체(Instance)를 분리시켜 BBox를 찾고 종류를 분류(Classification)해 낸다.
    Faster R-CNN에서 이용한다.
  - Semantic Segmentation : 이미지의 객체의 종류 별로 Edge의 형상만 남겨서 픽셀로 라벨링을 한다.
    FCN에서 이용한다.
  - Instance Segmentation : 이미지에서 각 객체를 분리시켜 객체 별로 Edge의 형상만 남겨서 픽셀로 라벨링 한다.
    즉, Instance Segmentation은 Object Detection으로 각 객체를 분리시킨 상태에서 그 각각의 객체를 Semantic Segmentation
한 것이다.
    Mask R-CNN에서 이용한다. (Faster R-CNN + FCN on ROI)

 (3) Fully Convolutional Networks
  - semantic segmentation의 base line이다.
  - 일반적인 CNN과 같은 과정을 거치는데 마지막 과정을 Fully Convolution, 1x1 Convolution으로 바꿔서 output이 bitmap이 
나올 수 있게 한다.

 (4) Leaderboard(성능 순위)
  - COCO 2017 Instance Segmentation Leaderboard
   1) UCenter (Mask R-CNN base algorithm)
   2) Megvii (Mask R-CNN base algorithm)
   3) Mask R-CNN
  
  - Cityscapes Leaderboard
   1) Mask R-CNN[COCO]
   2) SegNet
   3) Mask R-CNN[fine-only]


2. Mask R-CNN
 (1) Mask R-CNN 이란?
  - Mask R-CNN은 Faster R-CNN의 RoI에 Mask(FCN)가 추가된 것이다.
  - Mask R-CNN은 'Faster R-CNN의 과정인 Feature classification + 인스턴스 단위 bounding box regression'에 Mask만 추가!
  - Faster R-CNN의 과정에서 이미 Classification을 진행하므로 Mask(FCN)의 과정으로는 찾고자 하는 물체가 있는지 없는지만 
판단하는 Binary(이진적인) Sigmoid만 진행하게 된다.

 (2) Mask의 학습 방법
  - Lmask = Lc1 + Lc2 + ... + Lck (Mask는 여러 Class의 Mask로 이루어져 있다.)
    예1) Mask의 앞 과정들에서 Bbox로 '말' 이라는 인스턴스를 Lc2의 클래스에서 찾았다면, 그 외의 Lc1 ... Lck까지의 클래스를
지우고(이진적임) 정답인 클래스인 Lc2의 Mask 클래스만 가지고 학습을 진행한다.
    예2) 이미지가 있을 때, Faster R-CNN의 과정으로 이미지의 모든 부분을 Classification 하고 Bounding box를 씌운다. 이미지
중에 찾고 싶은 것이 '의자'라면 모든 Bounding box의 Mask 클래스들을 이진적으로 의자인지 아닌지 구분해서, 의자의 Mask 클래스
만 남기는 방식으로 학습을 진행한다.

 //(3) Mask(Fully Convolutional Network)의 형태
  - Equivariance : input이 바뀌면 output도 바뀐다.
  - Mask는 기본적으로 Equivariance의 룰을 따른다. 
  * Convolutions : Equivariant하다.
    Fully-ConvNet(FCN) : Mask의 네트워크로 Equivariant하다.
    Fully-Connected : CNN 안의 레이어로 Equivariant하지 않다.
    Pooling layers : Equivariant하지 않다.


3. RoI-Align
 (1) RoI Pooling이란?
  - RoI Pooling을 통해 다양한 사이즈의 RoI들을 7x7의 고정 사이즈로 만든다.
  - 과정 : RoI Pooling을 이용하여 Feature Map을 실수 값으로 반올림한 후 7x7 고정 사이즈로 만든다.
그 후, Max Pooling을 하기 위해 7x7의 고정 사이즈를 2x2로 만들어야 하는데 실수 픽셀이기 때문에 정수로 2x2로 자른다.
정수이기 때문에 조금 부정확하지만 2x2로 잘라진 것을 Max Pooling 하여 가장 큰 값을 뽑아 낸다.
  - 정리 : Faster R-CNN의 과정으로 이미지의 RoI들을 다 뽑아 낸다. Bbox Regression, Classification을 거친 후, RoI들의 사
이즈들이 다 다르므로 RoI Pooling의 과정(CNN 과정)을 거쳐서 고정 사이즈로 만든다. 이후 Mask만 추가하여 Binary를 진행하는 
것이 Mask-RCNN이 된다.

 (2) RoI-Align이란?
  - RoI Pooling으로 만들어진 Pooled Feature는 Segment 하기에 너무 작고, 조금 부정확하다는 점이 있다.
  - 따라서 Mask-RCNN에서는 RoI Pooling 보다는 RoI-Align을 이용한다.
  - RoI-Align은 정확성을 높이기 위해 '반올림 하지 않고' Feature의 픽셀 값을 그대로 가져간다. 따라서 픽셀 값에 따라 7x7
고정 사이즈로 만들고, 2x2로 정확히 잘라진 것을 한번 더 2x2로 잘라서(Subcells) 픽셀 단위로 4개씩 비교하여 Max Pooling 한다.

 (3) RoI Issue
  - RoI는 Zero-Padding을 한다. 한 이미지에 여러 객체(Instance)들이 있으면 각 객체들을 인식하기 위해 Zero-Padding을 이용
한다.

 (4) RoI-Align 성능
  - RoI Pooling에 비해서 RoI-Align은 4% 정도의 성능이 향상된 것을 알 수 있다. (Object Detection의 성능이 향상되었다.)